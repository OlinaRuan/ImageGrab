/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.tool;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;

/**
 *
 * @author macbookpro
 */
public class MainUI extends javax.swing.JFrame {

    public static final int MAX_RETRY = 10;

    public static final long IMAGE_SIZE_THRESHOLD = 20 * 1024L;

    public JProgressBar getProgressBar() {
        return progressBar;
    }


    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        this.setTitle("ImageGrab");
        
        InputStream iconInputStream = null;
        try {
            iconInputStream = MainUI.class.getClassLoader().getResourceAsStream("icon.png");
            Image iconImage = ImageIO.read(iconInputStream);
            this.setIconImage(iconImage);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != iconInputStream) {
                    iconInputStream.close();
                }
            } catch (IOException e) {
                //ignore.
            }
            
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        productDetailURL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        url = new javax.swing.JTextArea();
        clearUrlButton = new javax.swing.JButton();
        downloadButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        imageDirTextField = new javax.swing.JTextField();
        imageDirChooserButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        productDetailURL.setLabelFor(url);
        productDetailURL.setText("详情页地址");

        url.setColumns(20);
        url.setRows(5);
        jScrollPane1.setViewportView(url);

        clearUrlButton.setText("Clear");
        clearUrlButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearUrlButtonMouseClicked(evt);
            }
        });
        clearUrlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearUrlButtonActionPerformed(evt);
            }
        });

        downloadButton.setText("Download");
        downloadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                downloadButtonMouseClicked(evt);
            }
        });
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        progressLabel.setLabelFor(progressBar);
        progressLabel.setText("进度");

        jLabel1.setLabelFor(imageDirTextField);
        jLabel1.setText("图片存储目录");

        imageDirTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageDirTextFieldActionPerformed(evt);
            }
        });

        imageDirChooserButton.setText("选择目录");
        imageDirChooserButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageDirChooserButtonMouseClicked(evt);
            }
        });
        imageDirChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageDirChooserButtonActionPerformed(evt);
            }
        });

        pasteButton.setText("Paste");
        pasteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pasteButtonMouseClicked(evt);
            }
        });

        fileMenu.setText("File");

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productDetailURL)
                            .addComponent(progressLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageDirTextField)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clearUrlButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(imageDirChooserButton))
                    .addGroup(layout.createSequentialGroup()
                            .addComponent(downloadButton)
                            .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pasteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clearUrlButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pasteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(downloadButton))
                    .addGroup(layout.createSequentialGroup()
                            .addGap(27, 27, 27)
                            .addComponent(productDetailURL))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(imageDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imageDirChooserButton))
                .addContainerGap(96, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void clearUrlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearUrlButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clearUrlButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_downloadButtonActionPerformed
    
    private void clearUrlButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearUrlButtonMouseClicked
        url.setText("");
        progressBar.setValue(0);
        progressBar.setString("");
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                progressBar.updateUI();
            }
        });
        repaint();
        url.grabFocus();
    }//GEN-LAST:event_clearUrlButtonMouseClicked

    private void imageDirTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageDirTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imageDirTextFieldActionPerformed

    private void imageDirChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageDirChooserButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imageDirChooserButtonActionPerformed

    private void downloadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downloadButtonMouseClicked
        String productDetailPageURL = url.getText();
        if (productDetailPageURL == null || productDetailPageURL.isEmpty()) {
            playWarning();
            JOptionPane.showMessageDialog(this, "商品详情页地址没有填写", "请填写详情页URL地址", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!productDetailPageURL.startsWith("http://") && !productDetailPageURL.startsWith("https://")) {
            playWarning();
            JOptionPane.showMessageDialog(this, "商品详情页地址有错误", "请填写详情页URL地址", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String imageDir = imageDirTextField.getText();
        if (imageDir == null || imageDir.isEmpty()) {
            playWarning();
            JOptionPane.showMessageDialog(this, "图片存储位置没有选择", "请选择图片存储位置", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        File imageDirFile = new File(imageDir);
        if (imageDirFile.canWrite() && !imageDirFile.exists()) {
            imageDirFile.mkdirs();
        }
        
        if (!imageDirFile.exists() || !imageDirFile.canWrite()) {
            imageDirTextField.setText("");
            playWarning();
            JOptionPane.showMessageDialog(this, "请选择一个目录可以读写的文件夹", "图片地址错误", JOptionPane.ERROR_MESSAGE);
        }
        
        progressBar.setMaximum(100);
        progressBar.setMinimum(0);
        progressBar.setStringPainted(true);

        ImageDownloader imageDownloader = new ImageDownloader(this);
        imageDownloader.download(productDetailPageURL, imageDirFile);
        
        
    }//GEN-LAST:event_downloadButtonMouseClicked

    private void imageDirChooserButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageDirChooserButtonMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int status = fileChooser.showOpenDialog(this);
        if (status == JFileChooser.APPROVE_OPTION) {
           File file = fileChooser.getSelectedFile();
           imageDirTextField.setText(file.getAbsolutePath());
        }
        
    }//GEN-LAST:event_imageDirChooserButtonMouseClicked

    private void pasteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pasteButtonMouseClicked
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable transferable = clipboard.getContents(clipboard);
        if (null != transferable) {
            try {
                    if (transferable.isDataFlavorSupported(DataFlavor.stringFlavor)) {
                    url.setText(transferable.getTransferData(DataFlavor.stringFlavor).toString());
                }
            } catch(UnsupportedFlavorException e) {
                e.printStackTrace();
            } catch(IOException e) {
                e.printStackTrace();
            }
            
        }
        
    }//GEN-LAST:event_pasteButtonMouseClicked

    private void playWarning() {
        new Thread(SoundPlayer.WARNING_SOUND_PLAYER).start();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearUrlButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton imageDirChooserButton;
    private javax.swing.JTextField imageDirTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton pasteButton;
    private javax.swing.JLabel productDetailURL;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JTextArea url;
    // End of variables declaration//GEN-END:variables
}
